#!/usr/bin/env python3

import  argparse
import scapy.all as scapy
from prettytable import PrettyTable


def get_commandline_args()->str:
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--iprange", dest="iprange", help="Range of ip addresses.")
    args = parser.parse_args()

    if not args.iprange:
        parser.error("[-] An ip range is required.")
    return args.iprange

def scan(ip)->list:
    """
    This is function creates an ARP request directed to broadcast MAC address for ip.
    """
    arp_request = scapy.ARP(pdst = ip) #creating arp request
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") #broadcast MAC address for ip.

    arp_request_broadcast = broadcast/arp_request #Create an ARP broadcast/request packet
    answered_list, unanswered_list = scapy.srp(arp_request_broadcast, timeout=4, verbose=0)

    hosts = []
    for query_ans in answered_list:
        hosts.append({"ip": query_ans[1].psrc, "mac":query_ans[1].hwsrc})
    return hosts

def display_hosts(hosts)->None:
    table = PrettyTable(["IP", "MAC"])
    for host in hosts:
        table.add_row([host['ip'], host['mac']], divider=True)
    print(table)
    
 def save_to_file(hosts):
 	pass

if __name__ == "__main__":
    ip_range = get_commandline_args()
    hosts = scan(ip_range)
    display_hosts(hosts)
    
